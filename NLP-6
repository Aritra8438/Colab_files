{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install nltk --quiet\n!pip install prettytable --quiet","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T19:23:40.913022Z","iopub.execute_input":"2024-11-26T19:23:40.913332Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport math\nimport random\nimport multiprocessing\nfrom multiprocessing import Pool\nimport zipfile\nimport json\nimport re\nimport nltk\nimport numpy as np\nfrom nltk.probability import FreqDist\nimport matplotlib.pyplot as plt\nfrom prettytable import PrettyTable\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom tqdm import tqdm\nimport h5py \nfrom collections import Counter\nimport pandas as pd\nimport pickle\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.manifold import MDS\nimport tensorflow as tf\nfrom sklearn.manifold import TSNE\nfrom tensorflow.keras import layers\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"nltk.download('stopwords')\nnltk.download('punkt_tab')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}