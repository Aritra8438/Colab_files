{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":982,"sourceType":"datasetVersion","datasetId":483}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Import necessary modules","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport torch\nimport os\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom prettytable import PrettyTable","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:22:57.258448Z","iopub.execute_input":"2024-10-30T14:22:57.259155Z","iopub.status.idle":"2024-10-30T14:22:57.264929Z","shell.execute_reply.started":"2024-10-30T14:22:57.259117Z","shell.execute_reply":"2024-10-30T14:22:57.263852Z"},"trusted":true},"execution_count":111,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T12:58:52.018102Z","iopub.execute_input":"2024-10-30T12:58:52.018953Z","iopub.status.idle":"2024-10-30T12:58:52.056651Z","shell.execute_reply.started":"2024-10-30T12:58:52.018913Z","shell.execute_reply":"2024-10-30T12:58:52.055640Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"DATA_PATH = \"/kaggle/input/sms-spam-collection-dataset\"","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:00:29.296604Z","iopub.execute_input":"2024-10-30T13:00:29.297240Z","iopub.status.idle":"2024-10-30T13:00:29.301415Z","shell.execute_reply.started":"2024-10-30T13:00:29.297200Z","shell.execute_reply":"2024-10-30T13:00:29.300383Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv(os.path.join(DATA_PATH, \"spam.csv\"), encoding='latin1')\n\ndata = data.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis = 1)\ndata = data.rename(columns={\"v1\": \"category\", \"v2\": \"message\"})\n\ndata.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:13:33.985217Z","iopub.execute_input":"2024-10-30T13:13:33.986367Z","iopub.status.idle":"2024-10-30T13:13:34.012959Z","shell.execute_reply.started":"2024-10-30T13:13:33.986285Z","shell.execute_reply":"2024-10-30T13:13:34.012069Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"  category                                            message\n0      ham  Go until jurong point, crazy.. Available only ...\n1      ham                      Ok lar... Joking wif u oni...\n2     spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3      ham  U dun say so early hor... U c already then say...\n4      ham  Nah I don't think he goes to usf, he lives aro...\n5     spam  FreeMsg Hey there darling it's been 3 week's n...\n6      ham  Even my brother is not like to speak with me. ...\n7      ham  As per your request 'Melle Melle (Oru Minnamin...\n8     spam  WINNER!! As a valued network customer you have...\n9     spam  Had your mobile 11 months or more? U R entitle...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>category</th>\n      <th>message</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>spam</td>\n      <td>FreeMsg Hey there darling it's been 3 week's n...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ham</td>\n      <td>Even my brother is not like to speak with me. ...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ham</td>\n      <td>As per your request 'Melle Melle (Oru Minnamin...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>spam</td>\n      <td>WINNER!! As a valued network customer you have...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>spam</td>\n      <td>Had your mobile 11 months or more? U R entitle...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data[\"category\"].value_counts().plot(kind = 'pie', explode = [0, 0.1], figsize = (6, 6), autopct = '%1.1f%%', shadow = True)\nplt.ylabel(\"Spam vs Ham\")\nplt.legend([\"Ham\", \"Spam\"])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:13:37.698440Z","iopub.execute_input":"2024-10-30T13:13:37.698824Z","iopub.status.idle":"2024-10-30T13:13:38.312424Z","shell.execute_reply.started":"2024-10-30T13:13:37.698788Z","shell.execute_reply":"2024-10-30T13:13:38.310891Z"},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Stratified sampling\nA lot of messages are actually not spam. About 86% of our dataset consists of normal messages.While we split our data set into train and test or when we use cross validation, we will have to use stratified sampling, otherwise we have a chance of our training model being skewed towards normal messages. If the sample we choose to train our model consists majorly of normal messages, it may end up predicting everything as ham and we might not be able to figure this out since most of the messages we get are actually ham and will have a pretty good accuracy.","metadata":{}},{"cell_type":"code","source":"X = data['message']\ny = data['category']\n\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:14:02.526746Z","iopub.execute_input":"2024-10-30T13:14:02.527154Z","iopub.status.idle":"2024-10-30T13:14:02.533804Z","shell.execute_reply.started":"2024-10-30T13:14:02.527117Z","shell.execute_reply":"2024-10-30T13:14:02.532843Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state=41)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:31:57.539623Z","iopub.execute_input":"2024-10-30T13:31:57.540652Z","iopub.status.idle":"2024-10-30T13:31:57.549942Z","shell.execute_reply.started":"2024-10-30T13:31:57.540598Z","shell.execute_reply":"2024-10-30T13:31:57.548986Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"vectorizer = TfidfVectorizer()\nX_train_vec = vectorizer.fit_transform(X_train).toarray()\nX_test_vec = vectorizer.transform(X_test).toarray()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:31:59.489286Z","iopub.execute_input":"2024-10-30T13:31:59.490213Z","iopub.status.idle":"2024-10-30T13:31:59.877454Z","shell.execute_reply.started":"2024-10-30T13:31:59.490171Z","shell.execute_reply":"2024-10-30T13:31:59.876417Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"class SMSDataset(Dataset):\n    def __init__(self, texts, labels):\n        self.texts = texts\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return torch.tensor(self.texts[idx], dtype=torch.float32), torch.tensor(self.labels[idx], dtype=torch.long)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:32:02.557930Z","iopub.execute_input":"2024-10-30T13:32:02.558580Z","iopub.status.idle":"2024-10-30T13:32:02.564835Z","shell.execute_reply.started":"2024-10-30T13:32:02.558539Z","shell.execute_reply":"2024-10-30T13:32:02.563610Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"train_dataset = SMSDataset(X_train_vec, y_train)\ntest_dataset = SMSDataset(X_test_vec, y_test)\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:32:04.559621Z","iopub.execute_input":"2024-10-30T13:32:04.560020Z","iopub.status.idle":"2024-10-30T13:32:04.567472Z","shell.execute_reply.started":"2024-10-30T13:32:04.559981Z","shell.execute_reply":"2024-10-30T13:32:04.566413Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"class RNNModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNNModel, self).__init__()\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = x.unsqueeze(1)\n        out, _ = self.rnn(x)\n        out = out[:, -1, :]\n        out = self.fc(out)\n        return out","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:32:07.234918Z","iopub.execute_input":"2024-10-30T13:32:07.235678Z","iopub.status.idle":"2024-10-30T13:32:07.242139Z","shell.execute_reply.started":"2024-10-30T13:32:07.235634Z","shell.execute_reply":"2024-10-30T13:32:07.241069Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"class LSTMModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(LSTMModel, self).__init__()\n        self.lstm = nn.LSTM(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = x.unsqueeze(1)\n        out, _ = self.lstm(x)\n        out = out[:, -1, :]\n        out = self.fc(out)\n        return out","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:32:09.143318Z","iopub.execute_input":"2024-10-30T13:32:09.144219Z","iopub.status.idle":"2024-10-30T13:32:09.150634Z","shell.execute_reply.started":"2024-10-30T13:32:09.144176Z","shell.execute_reply":"2024-10-30T13:32:09.149603Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"input_size = X_train_vec.shape[1]\nhidden_size = 64\noutput_size = len(label_encoder.classes_)\nnum_epochs = 100\nlearning_rate = 0.001\n\nrnn_model = RNNModel(input_size, hidden_size, output_size).to(device)\nlstm_model = LSTMModel(input_size, hidden_size, output_size).to(device)\n\nclass_weights = torch.tensor([0.14, 0.86], device=device)\n\ncriterion = nn.CrossEntropyLoss(weight=class_weights)\nrnn_optimizer = optim.Adam(rnn_model.parameters(), lr=learning_rate)\nlstm_optimizer = optim.Adam(lstm_model.parameters(), lr=learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:18:07.589429Z","iopub.execute_input":"2024-10-30T14:18:07.589861Z","iopub.status.idle":"2024-10-30T14:18:07.621133Z","shell.execute_reply.started":"2024-10-30T14:18:07.589826Z","shell.execute_reply":"2024-10-30T14:18:07.620405Z"},"trusted":true},"execution_count":102,"outputs":[]},{"cell_type":"code","source":"def train_model(model, data_loader, optimizer, num_epochs):\n    model.train()\n    epoch_losses = []\n    for epoch in tqdm(range(num_epochs),  desc=f\"Training {model.__class__.__name__} for {num_epochs} epochs\"):\n        total_loss = 0\n        for texts, labels in data_loader:\n            texts, labels = texts.to(device), labels.to(device)\n\n            outputs = model(texts)\n            loss = criterion(outputs, labels)\n\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            total_loss += loss.item()\n\n        avg_loss = total_loss / len(data_loader)\n        epoch_losses.append(avg_loss)\n        \n        if (epoch-19) % 20 == 0:\n            print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {avg_loss:.4f}\")\n            \n    return epoch_losses\n\nrnn_losses = train_model(rnn_model, train_loader, rnn_optimizer, num_epochs)\nlstm_losses = train_model(lstm_model, train_loader, lstm_optimizer, num_epochs)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:18:17.142459Z","iopub.execute_input":"2024-10-30T14:18:17.143339Z","iopub.status.idle":"2024-10-30T14:19:49.657705Z","shell.execute_reply.started":"2024-10-30T14:18:17.143294Z","shell.execute_reply":"2024-10-30T14:19:49.656768Z"},"trusted":true},"execution_count":103,"outputs":[{"output_type":"display_data","data":{"text/plain":"Training RNNModel for 100 epochs:   0%|          | 0/100 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"23a531c34ada49288f987fd4acd02175"}},"metadata":{}},{"name":"stdout","text":"Epoch [20/100], Loss: 0.0006\nEpoch [40/100], Loss: 0.0001\nEpoch [60/100], Loss: 0.0000\nEpoch [80/100], Loss: 0.0000\nEpoch [100/100], Loss: 0.0000\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training LSTMModel for 100 epochs:   0%|          | 0/100 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ef57cb02c1eb47d9abf656b8911ec31d"}},"metadata":{}},{"name":"stdout","text":"Epoch [20/100], Loss: 0.0005\nEpoch [40/100], Loss: 0.0001\nEpoch [60/100], Loss: 0.0000\nEpoch [80/100], Loss: 0.0000\nEpoch [100/100], Loss: 0.0000\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"\\nPlot loss vs epochs for both the models:\\n\")\n\nplt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nplt.plot(range(1, num_epochs + 1), rnn_losses, label='RNN Loss', color='b')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"RNN Loss vs. Epoch\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(range(1, num_epochs + 1), lstm_losses, label='LSTM Loss', color='r')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"LSTM Loss vs. Epoch\")\nplt.legend()\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:19:52.335097Z","iopub.execute_input":"2024-10-30T14:19:52.335508Z","iopub.status.idle":"2024-10-30T14:19:52.906771Z","shell.execute_reply.started":"2024-10-30T14:19:52.335470Z","shell.execute_reply":"2024-10-30T14:19:52.905876Z"},"trusted":true},"execution_count":104,"outputs":[{"name":"stdout","text":"\nPlot loss vs epochs for both the models:\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"def get_accuracy(model, data_loader):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for texts, labels in data_loader:\n            texts, labels = texts.to(device), labels.to(device)\n            outputs = model(texts)\n            _, predicted = torch.max(outputs.data, 1)\n            for idx in range(len(predicted)):\n                if labels[idx] == 1:\n                    total += 1\n                    correct += (predicted[idx] == labels[idx])*1\n                else:\n                    total += 1\n                    correct += (predicted[idx] == labels[idx])*1\n    return correct / total\n\ndef get_weighted_accuracy(model, data_loader):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for texts, labels in data_loader:\n            texts, labels = texts.to(device), labels.to(device)\n            outputs = model(texts)\n            _, predicted = torch.max(outputs.data, 1)\n            for idx in range(len(predicted)):\n                if labels[idx] == 1:\n                    total += 86\n                    correct += (predicted[idx] == labels[idx])*86\n                else:\n                    total += 14\n                    correct += (predicted[idx] == labels[idx])*14\n    return correct / total\n\n# Evaluate both models\nrnn_accuracy = get_accuracy(rnn_model, test_loader)\nlstm_accuracy = get_accuracy(lstm_model, test_loader)\n\nrnn_weighted_accuracy = get_weighted_accuracy(rnn_model, test_loader)\nlstm_weighted_accuracy = get_weighted_accuracy(lstm_model, test_loader)\n\nprint(\"\\n\")\nprint(f'RNN Test Accuracy: {rnn_accuracy * 100:.2f}%')\nprint(f'LSTM Test Accuracy: {lstm_accuracy * 100:.2f}%')\n\nprint(\"\\n\")\nprint(f'RNN Test Weighted Accuracy: {rnn_weighted_accuracy * 100:.2f}%')\nprint(f'LSTM Test Weighted Accuracy: {lstm_weighted_accuracy * 100:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:20:13.841222Z","iopub.execute_input":"2024-10-30T14:20:13.841632Z","iopub.status.idle":"2024-10-30T14:20:14.409639Z","shell.execute_reply.started":"2024-10-30T14:20:13.841595Z","shell.execute_reply":"2024-10-30T14:20:14.408703Z"},"trusted":true},"execution_count":106,"outputs":[{"name":"stdout","text":"\n\nRNN Test Accuracy: 99.01%\nLSTM Test Accuracy: 98.92%\n\n\nRNN Test Weighted Accuracy: 97.23%\nLSTM Test Weighted Accuracy: 96.90%\n","output_type":"stream"}]},{"cell_type":"code","source":"def show_combined_examples(rnn_model, lstm_model, data_loader):\n    \n    marker = 1\n    \n    rnn_model.eval()\n    lstm_model.eval()\n    \n    with torch.no_grad():\n        table = PrettyTable()\n        table.field_names = [\"Text\", \"Actual Label\", \"RNN Predicted\", \"LSTM Predicted\"]\n\n        different_predictions = []\n\n        for texts, labels in data_loader:\n            texts, labels = texts.to(device), labels.to(device)\n\n            rnn_outputs = rnn_model(texts)\n            _, rnn_predicted = torch.max(rnn_outputs.data, 1)\n\n            lstm_outputs = lstm_model(texts)\n            _, lstm_predicted = torch.max(lstm_outputs.data, 1)\n            \n            if marker == 1:\n                marker = 0\n                for i in range(5):\n                    text = vectorizer.inverse_transform(texts[i].cpu().numpy().reshape(1, -1))[0]\n                    actual_label = label_encoder.inverse_transform([labels[i].item()])[0]\n                    rnn_predicted_label = label_encoder.inverse_transform([rnn_predicted[i].item()])[0]\n                    lstm_predicted_label = label_encoder.inverse_transform([lstm_predicted[i].item()])[0]\n                    \n                    table.add_row([\n                        \" \".join(text),\n                        actual_label,\n                        rnn_predicted_label,\n                        lstm_predicted_label\n                    ])\n                    \n\n            for i in range(texts.size(0)):  # Iterate through all texts in the batch\n                text = vectorizer.inverse_transform(texts[i].cpu().numpy().reshape(1, -1))[0]\n                actual_label = label_encoder.inverse_transform([labels[i].item()])[0]\n                rnn_predicted_label = label_encoder.inverse_transform([rnn_predicted[i].item()])[0]\n                lstm_predicted_label = label_encoder.inverse_transform([lstm_predicted[i].item()])[0]\n\n                # Check if the predictions are different\n                if rnn_predicted[i] != lstm_predicted[i]:\n                    different_predictions.append([\n                        \" \".join(text),\n                        actual_label,\n                        rnn_predicted_label,\n                        lstm_predicted_label\n                    ])\n                \n                \n                if len(different_predictions) >= 10:\n                    break\n            if len(different_predictions) >= 10:\n                break\n\n        for row in different_predictions:\n            table.add_row(row)\n\n    print(table)\n\nprint(\"Combined Results for RNN and LSTM\")\nshow_combined_examples(rnn_model, lstm_model, test_loader)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:36:21.728640Z","iopub.execute_input":"2024-10-30T14:36:21.729401Z","iopub.status.idle":"2024-10-30T14:36:26.994545Z","shell.execute_reply.started":"2024-10-30T14:36:21.729328Z","shell.execute_reply":"2024-10-30T14:36:26.993597Z"},"trusted":true},"execution_count":121,"outputs":[{"name":"stdout","text":"Combined Results for RNN and LSTM\n+---------------------------------------------------------------------------------------+--------------+---------------+----------------+\n|                                          Text                                         | Actual Label | RNN Predicted | LSTM Predicted |\n+---------------------------------------------------------------------------------------+--------------+---------------+----------------+\n|           500 80488 account and credit free just ll msgs ok text to we your           |     spam     |      spam     |      spam      |\n|                         booked hey lessons liao on sun the ve                         |     ham      |      ham      |      ham       |\n|                            from know snowman songs the yes                            |     ham      |      ham      |      ham       |\n|                                convey him my regards to                               |     ham      |      ham      |      ham       |\n|                               many sweets there were yes                              |     ham      |      ham      |      ham       |\n| 2day ac ans but end energy high is it know may not question reply sms strong ur where |     spam     |      spam     |      ham       |\n|                               are call can free now you                               |     ham      |      ham      |      spam      |\n|                                  liked mobile new the                                 |     ham      |      spam     |      ham       |\n+---------------------------------------------------------------------------------------+--------------+---------------+----------------+\n","output_type":"stream"}]}]}